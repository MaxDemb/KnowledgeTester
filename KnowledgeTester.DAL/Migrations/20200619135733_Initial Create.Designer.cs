// <auto-generated />
using System;
using DAL.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.EntityFramework.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200619135733_Initial Create")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Domain.Entities.AnswerVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("Right")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerVariants");
                });

            modelBuilder.Entity("DAL.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionRightAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionStudentAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DAL.Domain.Entities.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<int>("RightAnswers")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("DAL.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 18,
                            IsActive = true,
                            Name = "Max Dembitsky",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(8734),
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            Age = 16,
                            IsActive = true,
                            Name = "Ivan Gal",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9765),
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 3,
                            Age = 26,
                            IsActive = true,
                            Name = "Mike Vazovsky",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9795),
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 4,
                            Age = 23,
                            IsActive = true,
                            Name = "Keis Lokie",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9798),
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 5,
                            Age = 15,
                            IsActive = true,
                            Name = "Petro",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9802),
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 6,
                            Age = 29,
                            IsActive = true,
                            Name = "Olga",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9806),
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 7,
                            Age = 29,
                            IsActive = false,
                            Name = "Svitlana",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9809),
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 8,
                            Age = 56,
                            IsActive = true,
                            Name = "Murko",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9813),
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 9,
                            Age = 21,
                            IsActive = true,
                            Name = "Taras",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9816),
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 10,
                            Age = 62,
                            IsActive = true,
                            Name = "Sofia",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9819),
                            TeacherId = 4
                        },
                        new
                        {
                            Id = 11,
                            Age = 15,
                            IsActive = true,
                            Name = "Kate",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9823),
                            TeacherId = 4
                        },
                        new
                        {
                            Id = 12,
                            Age = 56,
                            IsActive = false,
                            Name = "Max Term",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9827),
                            TeacherId = 5
                        },
                        new
                        {
                            Id = 13,
                            Age = 43,
                            IsActive = true,
                            Name = "Interrest",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9830),
                            TeacherId = 5
                        },
                        new
                        {
                            Id = 14,
                            Age = 32,
                            IsActive = true,
                            Name = "Somebody new",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9834),
                            TeacherId = 6
                        },
                        new
                        {
                            Id = 15,
                            Age = 56,
                            IsActive = true,
                            Name = "Limba",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9837),
                            TeacherId = 7
                        },
                        new
                        {
                            Id = 16,
                            Age = 63,
                            IsActive = true,
                            Name = "Andro",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9840),
                            TeacherId = 7
                        },
                        new
                        {
                            Id = 17,
                            Age = 22,
                            IsActive = true,
                            Name = "Morgenshetrn",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9844),
                            TeacherId = 8
                        },
                        new
                        {
                            Id = 18,
                            Age = 53,
                            IsActive = true,
                            Name = "Isaac Newton",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9847),
                            TeacherId = 10
                        },
                        new
                        {
                            Id = 19,
                            Age = 27,
                            IsActive = true,
                            Name = "Elon Musk",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9851),
                            TeacherId = 10
                        },
                        new
                        {
                            Id = 20,
                            Age = 63,
                            IsActive = true,
                            Name = "Fredie",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9854),
                            TeacherId = 8
                        },
                        new
                        {
                            Id = 21,
                            Age = 25,
                            IsActive = true,
                            Name = "Michael Jackson",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9858),
                            TeacherId = 6
                        },
                        new
                        {
                            Id = 22,
                            Age = 65,
                            IsActive = true,
                            Name = "Shadow",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 144, DateTimeKind.Local).AddTicks(9861),
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("DAL.Domain.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 21,
                            IsActive = true,
                            Name = "Frank",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 139, DateTimeKind.Local).AddTicks(7300)
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            IsActive = true,
                            Name = "James",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 142, DateTimeKind.Local).AddTicks(7498)
                        },
                        new
                        {
                            Id = 3,
                            Age = 34,
                            IsActive = true,
                            Name = "Olga",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 142, DateTimeKind.Local).AddTicks(7548)
                        },
                        new
                        {
                            Id = 4,
                            Age = 35,
                            IsActive = true,
                            Name = "Ocean",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 142, DateTimeKind.Local).AddTicks(7554)
                        },
                        new
                        {
                            Id = 5,
                            Age = 28,
                            IsActive = true,
                            Name = "Kate",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 142, DateTimeKind.Local).AddTicks(7557)
                        },
                        new
                        {
                            Id = 6,
                            Age = 40,
                            IsActive = true,
                            Name = "Harold",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 142, DateTimeKind.Local).AddTicks(7561)
                        },
                        new
                        {
                            Id = 7,
                            Age = 40,
                            IsActive = true,
                            Name = "Harold Cat",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 142, DateTimeKind.Local).AddTicks(7564)
                        },
                        new
                        {
                            Id = 8,
                            Age = 44,
                            IsActive = true,
                            Name = "Tom Hard",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 142, DateTimeKind.Local).AddTicks(7568)
                        },
                        new
                        {
                            Id = 9,
                            Age = 42,
                            IsActive = true,
                            Name = "Sinatra",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 142, DateTimeKind.Local).AddTicks(7571)
                        },
                        new
                        {
                            Id = 10,
                            Age = 56,
                            IsActive = true,
                            Name = "Dima",
                            RegistrationDate = new DateTime(2020, 6, 19, 16, 57, 33, 142, DateTimeKind.Local).AddTicks(7575)
                        });
                });

            modelBuilder.Entity("DAL.Domain.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpenedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2018, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "C# Essentials",
                            OpenedDate = new DateTime(2020, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2018, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "Python Essentials",
                            OpenedDate = new DateTime(2020, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = false,
                            Name = "Python Pro",
                            OpenedDate = new DateTime(2020, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "SQL Pro",
                            OpenedDate = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2020, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "C# LINQ",
                            OpenedDate = new DateTime(2020, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2016, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "Mechanic test",
                            OpenedDate = new DateTime(2020, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 4
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2016, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "Electric test",
                            OpenedDate = new DateTime(2020, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 4
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2010, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2016, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = false,
                            Name = "Chemistry starter",
                            OpenedDate = new DateTime(2016, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 4
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2010, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2019, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = false,
                            Name = "Chemistry middle",
                            OpenedDate = new DateTime(2018, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 4
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(2010, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "Chemistry pro",
                            OpenedDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 4
                        },
                        new
                        {
                            Id = 11,
                            CreationDate = new DateTime(2010, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "English a1",
                            OpenedDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 5
                        },
                        new
                        {
                            Id = 12,
                            CreationDate = new DateTime(2010, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "English a2",
                            OpenedDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 5
                        },
                        new
                        {
                            Id = 13,
                            CreationDate = new DateTime(2010, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "English b1",
                            OpenedDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 5
                        },
                        new
                        {
                            Id = 14,
                            CreationDate = new DateTime(2010, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "English b2",
                            OpenedDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 5
                        },
                        new
                        {
                            Id = 15,
                            CreationDate = new DateTime(2010, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "French",
                            OpenedDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 6
                        },
                        new
                        {
                            Id = 16,
                            CreationDate = new DateTime(2010, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOpen = true,
                            Name = "Spanish",
                            OpenedDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 7
                        });
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Domain.Entities.AnswerVariant", b =>
                {
                    b.HasOne("DAL.Domain.Entities.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("DAL.Domain.Entities.Question", b =>
                {
                    b.HasOne("DAL.Domain.Entities.Test", null)
                        .WithMany("Questions")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("DAL.Domain.Entities.Result", b =>
                {
                    b.HasOne("DAL.Domain.Entities.Student", "Student")
                        .WithMany("Results")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Domain.Entities.Test", "Test")
                        .WithMany("Results")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Domain.Entities.Student", b =>
                {
                    b.HasOne("DAL.Domain.Entities.Teacher", "Teachers")
                        .WithMany("Students")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Domain.Entities.Test", b =>
                {
                    b.HasOne("DAL.Domain.Entities.Teacher", "Owner")
                        .WithMany("Tests")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
